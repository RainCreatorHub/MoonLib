local httpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")

local InterfaceManager = {}

do
    InterfaceManager.Folder = "RainLibSettings" -- Nome da pasta no Workspace
    InterfaceManager.Settings = {
        Theme = "Dark",
        Transparency = true,
        MenuKeybind = "LeftControl"
    }

    function InterfaceManager:SetFolder(folder)
        self.Folder = folder
        self:BuildFolderTree()
    end

    function InterfaceManager:SetLibrary(library)
        self.Library = library
    end

    function InterfaceManager:BuildFolderTree()
        -- Cria um Folder no Workspace se não existir
        local settingsFolder = Workspace:FindFirstChild(self.Folder)
        if not settingsFolder then
            settingsFolder = Instance.new("Folder")
            settingsFolder.Name = self.Folder
            settingsFolder.Parent = Workspace
            print("[InterfaceManager] Criado folder '" .. self.Folder .. "' no Workspace")
        end

        -- Cria um StringValue para armazenar as configurações
        local settingsValue = settingsFolder:FindFirstChild("settings")
        if not settingsValue then
            settingsValue = Instance.new("StringValue")
            settingsValue.Name = "settings"
            settingsValue.Value = httpService:JSONEncode(self.Settings) -- Valor inicial
            settingsValue.Parent = settingsFolder
            print("[InterfaceManager] Criado StringValue 'settings' no Workspace")
        end
    end

    function InterfaceManager:SaveSettings()
        local settingsFolder = Workspace:FindFirstChild(self.Folder)
        if settingsFolder then
            local settingsValue = settingsFolder:FindFirstChild("settings")
            if settingsValue then
                settingsValue.Value = httpService:JSONEncode(self.Settings)
                print("[InterfaceManager] Configurações salvas no Workspace")
            else
                warn("[InterfaceManager] StringValue 'settings' não encontrado para salvar")
            end
        else
            warn("[InterfaceManager] Folder '" .. self.Folder .. "' não encontrado para salvar")
        end
    end

    function InterfaceManager:LoadSettings()
        local settingsFolder = Workspace:FindFirstChild(self.Folder)
        if settingsFolder then
            local settingsValue = settingsFolder:FindFirstChild("settings")
            if settingsValue then
                local success, decoded = pcall(httpService.JSONDecode, httpService, settingsValue.Value)
                if success then
                    for i, v in pairs(decoded) do
                        InterfaceManager.Settings[i] = v
                    end
                    print("[InterfaceManager] Configurações carregadas do Workspace")
                else
                    warn("[InterfaceManager] Falha ao decodificar JSON: " .. decoded)
                end
            end
        end
    end

    function InterfaceManager:BuildInterfaceSection(tab)
        assert(self.Library, "Must set InterfaceManager.Library")
        local Library = self.Library
        local Settings = InterfaceManager.Settings

        -- Carrega as configurações existentes
        InterfaceManager:LoadSettings()

        -- Cria uma seção na aba
        tab:AddSection("Interface")

        -- Dropdown para tema
        local interfaceTheme = tab:Dropdown({
            Text = "Theme",
            Options = {"Dark"}, -- RainLib só tem "Dark" por enquanto, podemos expandir depois
            Default = Settings.Theme,
            Callback = function(value)
                Library:SetTheme(Library.Themes[value])
                Settings.Theme = value
                InterfaceManager:SaveSettings()
            end
        })

        -- Toggle para transparência
        local transparencyToggle = tab:Toggle({
            Text = "Transparency",
            Default = Settings.Transparency,
            Callback = function(value)
                -- RainLib não tem ToggleTransparency nativo, vamos simular com transparência básica
                for _, window in pairs(Library.Windows) do
                    window.MainFrame.BackgroundTransparency = value and 0.5 or 0
                end
                Settings.Transparency = value
                InterfaceManager:SaveSettings()
            end
        })

        -- Keybind para minimizar
        local menuKeybind = tab:Button({
            Text = "Set Minimize Keybind: " .. Settings.MenuKeybind,
            Callback = function()
                print("[InterfaceManager] Aguardando nova tecla para minimizar...")
                local input = UserInputService.InputBegan:Wait()
                if input.KeyCode.Name ~= "Unknown" then
                    Settings.MenuKeybind = input.KeyCode.Name
                    menuKeybind.Text = "Set Minimize Keybind: " .. Settings.MenuKeybind
                    InterfaceManager:SaveSettings()
                    print("[InterfaceManager] Keybind atualizado para: " .. Settings.MenuKeybind)
                end
            end
        })

        -- Lógica de minimizar com a tecla
        UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode.Name == Settings.MenuKeybind then
                for _, window in pairs(Library.Windows) do
                    window.MainFrame.Visible = not window.MainFrame.Visible
                    print("[InterfaceManager] Janela " .. (window.MainFrame.Visible and "aberta" or "minimizada"))
                end
            end
        end)
    end
end

return InterfaceManager
